import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from mpl_toolkits.mplot3d import Axes3D
def line_intersection(p1, p2, mask):
    """ Return the intersection point of two line segments (p1,p2) and (p3,p4) """
    s1_x = p2[0] - p1[0]
    s1_y = p2[1] - p1[1]
    n = len(mask)
    for i in range(0, n):
        p3 = mask[i]
        p4 = mask[(i+1)%n]
        s2_x = p4[0] - p3[0]
        s2_y = p4[1] - p3[1]

        s = (-s1_y * (p1[0] - p3[0]) + s1_x * (p1[1] - p3[1])) / (-s2_x * s1_y + s1_x * s2_y)
        t = (s2_x * (p1[1] - p3[1]) - s2_y * (p1[0] - p3[0])) / (-s2_x * s1_y + s1_x * s2_y)

        if 0 <= s <= 1 and 0 <= t <= 1:
            # Collision detected
            intersection_x = p1[0] + (t * s1_x)
            intersection_y = p1[1] + (t * s1_y)
            return (intersection_x, intersection_y)
    return None

def clip_paths(mask, lines):
    npath = []
    # Check all segments of path1 against all segments of path2
    lj = 0
    n = len(lines)
    for lj in range(0, n):
        if not is_in_poly(lines[lj], mask):
            if is_in_poly(lines[(lj + 1)%n], mask):
                # chen giao diem
                npath.append(line_intersection(lines[lj], lines[lj+1], mask))

        else: # diem dang xet dang o trong
            npath.append(lines[lj])
            if not is_in_poly(lines[lj + 1], mask):
                npath.append(line_intersection(lines[lj], lines[lj+1], mask))
    return npath        

           

def is_in_poly(point, polygon):
    """Determines if a point is inside a polygon using the ray-casting algorithm.
    
    Args:
        point (tuple): The point as (x, y) coordinates.
        polygon (list): A list of vertices of the polygon [(x1, y1), (x2, y2), ...].
    
    Returns:
        bool: True if the point is inside the polygon, False otherwise.
    """
    x, y = point
    n = len(polygon)
    inside = False

    # Loop through each edge of the polygon
    for i in range(n):
        x1, y1 = polygon[i]
        x2, y2 = polygon[(i + 1) % n]  # Next vertex (wraps around to the first vertex)
        
        # Check if the ray crosses the edge
        if min(y1, y2) < y <= max(y1, y2) and x <= max(x1, x2):
            # Compute the intersection point of the edge with the horizontal ray at y
            if y1 != y2:
                x_intersect = (y - y1) * (x2 - x1) / (y2 - y1) + x1
            if x1 == x2 or x <= x_intersect:
                inside = not inside

    return inside
def add_z_coordinate(points, z_value):
    """Add a fixed z-coordinate to a list of 2D points."""
    return np.array([[p[0], p[1], z_value] for p in points])

# Example paths
mask = [[51.462, -14.393], [51.449, -14.366], [51.416, -14.327], [51.398, -14.303], [51.351, -14.263], [51.323, -14.235], [51.3, -14.219], [51.286, -14.208], [51.265, -14.194], [51.251, -14.184], [51.232, -14.173], [51.219, -14.163], [51.209, -14.154], [51.193, -14.145], [50.892, -13.968], [50.53, -13.756], [50.318, -13.658], [49.852, -13.444], [49.426, -13.278], [48.482, -12.91], [47.099, -12.449], [46.667, -12.321], [45.706, -12.037], [45.041, -11.863], [43.559, -11.476], [42.891, -11.323], [41.399, -10.982], [40.728, -10.847], [39.23, -10.544], [38.557, -10.423], [37.055, -10.151], [35.327, -9.879], [31.466, -9.271], [29.739, -9.021], [25.879, -8.463], [24.567, -8.273], [21.633, -7.849], [20.324, -7.652], [17.393, -7.213], [16.292, -7.041], [13.829, -6.656], [12.731, -6.476], [10.273, -6.074], [9.177, -5.885], [6.726, -5.463], [5.634, -5.264], [3.188, -4.818], [1.383, -4.461], [-2.655, -3.662], [-3.555, -3.469], [-5.568, -3.036], [-6.466, -2.831], [-8.474, -2.372], [-9.369, -2.154], [-11.372, -1.667], [-12.263, -1.434], [-14.259, -0.913], [-15.146, -0.664], [-17.133, -0.107], [-18.015, 0.16], [-19.991, 0.758], [-21.067, 1.117], [-23.477, 1.92], [-24.538, 2.315], [-26.917, 3.202], [-27.441, 3.415], [-28.616, 3.894], [-29.134, 4.119], [-30.296, 4.625], [-30.807, 4.863], [-31.955, 5.398], [-33.036, 5.95], [-33.537, 6.193], [-33.677, 5.983], [-33.824, 5.763], [-33.877, 5.684], [-34.075, 5.386], [-34.655, 4.517], [-41.503, 9.138], [-42.562, 9.828], [-43.265, 10.31], [-50.02, 14.73], [-50.086, 14.758], [-50.21, 14.725], [-50.49, 14.553], [-50.504, 14.545], [-50.518, 14.532], [-50.532, 14.511], [-50.911, 13.943], [-50.914, 13.932], [-50.917, 13.925], [-50.953, 13.695], [-50.97, 13.585], [-50.943, 13.372], [-50.934, 13.359], [-50.23, 12.876], [-43.476, 8.456], [-37.783, 4.625], [-35.564, 3.152], [-36.022, 2.466], [-36.168, 2.246], [-36.343, 1.983], [-36.382, 1.925], [-36.541, 1.687], [-36.139, 0.466], [-34.663, -3.878], [-33.331, -7.873], [-32.675, -9.841], [-32.54, -10.181], [-32.276, -10.844], [-32.103, -11.166], [-31.766, -11.795], [-31.558, -12.095], [-31.152, -12.682], [-30.911, -12.957], [-30.441, -13.494], [-30.171, -13.739], [-29.643, -14.22], [-29.347, -14.433], [-28.767, -14.851], [-28.449, -15.029], [-27.826, -15.378], [-27.49, -15.52], [-26.831, -15.796], [-26.481, -15.898], [-25.796, -16.098], [-25.436, -16.16], [-24.732, -16.281], [-24.368, -16.302], [-23.655, -16.342], [38.95, -16.342], [44.93, -16.368], [46.677, -16.363], [47.061, -16.294], [47.128, -16.279], [47.165, -16.27], [48.448, -15.97], [48.485, -15.96], [49.764, -15.599], [49.784, -15.592], [50.462, -15.358], [50.572, -15.312], [51.157, -15.051], [51.165, -15.051], [51.199, -15.005], [51.256, -14.975], [51.294, -14.951], [51.356, -14.904], [51.392, -14.873], [51.425, -14.837], [51.443, -14.816], [51.47, -14.772], [51.483, -14.748], [51.503, -14.698], [51.511, -14.672], [51.516, -14.617], [51.521, -14.59], [51.512, -14.512], [51.495, -14.466], [51.489, -14.441], [51.462, -14.393]]
lines = [(-47.5, -17.5), (-50.0, -16.4802), (-52.5, -12.5), (-55.0, -11.4802), (-55.0, -6.4802), (-52.5, -7.5), (-50.0, -11.4802), (-47.5, -12.5), (-45.0, -16.4802), (-42.5, -17.5), (-37.5, -17.5), (-40.0, -16.4802), (-42.5, -12.5), (-45.0, -11.4802), (-47.5, -7.5), (-50.0, -6.4802), (-52.5, -2.5), (-55.0, -1.4802), (-55.0, 3.5198), (-52.5, 2.5), (-50.0, -1.4802), (-47.5, -2.5), (-45.0, -6.4802), (-42.5, -7.5), (-40.0, -11.4802), (-37.5, -12.5), (-35.0, -16.4802), (-32.5, -17.5), (-27.5, -17.5), (-30.0, -16.4802), (-32.5, -12.5), (-35.0, -11.4802), (-37.5, -7.5), (-40.0, -6.4802), (-42.5, -2.5), (-45.0, -1.4802), (-47.5, 2.5), (-50.0, 3.5198), (-52.5, 7.5), (-55.0, 8.5198), (-55.0, 13.5198), (-52.5, 12.5), (-50.0, 8.5198), (-47.5, 7.5), (-45.0, 3.5198), (-42.5, 2.5), (-40.0, -1.4802), (-37.5, -2.5), (-35.0, -6.4802), (-32.5, -7.5), (-30.0, -11.4802), (-27.5, -12.5), (-25.0, -16.4802), (-22.5, -17.5), (-17.5, -17.5), (-20.0, -16.4802), (-22.5, -12.5), (-25.0, -11.4802), (-27.5, -7.5), (-30.0, -6.4802), (-32.5, -2.5), (-35.0, -1.4802), (-37.5, 2.5), (-40.0, 3.5198), (-42.5, 7.5), (-45.0, 8.5198), (-47.5, 12.5), (-50.0, 13.5198), (-52.5, 17.5), (-47.5, 17.5), (-45.0, 13.5198), (-42.5, 12.5), (-40.0, 8.5198), (-37.5, 7.5), (-35.0, 3.5198), (-32.5, 2.5), (-30.0, -1.4802), (-27.5, -2.5), (-25.0, -6.4802), (-22.5, -7.5), (-20.0, -11.4802), (-17.5, -12.5), (-15.0, -16.4802), (-12.5, -17.5), (-7.5, -17.5), (-10.0, -16.4802), (-12.5, -12.5), (-15.0, -11.4802), (-17.5, -7.5), (-20.0, -6.4802), (-22.5, -2.5), (-25.0, -1.4802), (-27.5, 2.5), (-30.0, 3.5198), (-32.5, 7.5), (-35.0, 8.5198), (-37.5, 12.5), (-40.0, 13.5198), (-42.5, 17.5), (-37.5, 17.5), (-35.0, 13.5198), (-32.5, 12.5), (-30.0, 8.5198), (-27.5, 7.5), (-25.0, 3.5198), (-22.5, 2.5), (-20.0, -1.4802), (-17.5, -2.5), (-15.0, -6.4802), (-12.5, -7.5), (-10.0, -11.4802), (-7.5, -12.5), (-5.0, -16.4802), (-2.5, -17.5), (2.5, -17.5), (0.0, -16.4802), (-2.5, -12.5), (-5.0, -11.4802), (-7.5, -7.5), (-10.0, -6.4802), (-12.5, -2.5), (-15.0, -1.4802), (-17.5, 2.5), (-20.0, 3.5198), (-22.5, 7.5), (-25.0, 8.5198), (-27.5, 12.5), (-30.0, 13.5198), (-32.5, 17.5), (-27.5, 17.5), (-25.0, 13.5198), (-22.5, 12.5), (-20.0, 8.5198), (-17.5, 7.5), (-15.0, 3.5198), (-12.5, 2.5), (-10.0, -1.4802), (-7.5, -2.5), (-5.0, -6.4802), (-2.5, -7.5), (0.0, -11.4802), (2.5, -12.5), (5.0, -16.4802), (7.5, -17.5), (12.5, -17.5), (10.0, -16.4802), (7.5, -12.5), (5.0, -11.4802), (2.5, -7.5), (0.0, -6.4802), (-2.5, -2.5), (-5.0, -1.4802), (-7.5, 2.5), (-10.0, 3.5198), (-12.5, 7.5), (-15.0, 8.5198), (-17.5, 12.5), (-20.0, 13.5198), (-22.5, 17.5), (-17.5, 17.5), (-15.0, 13.5198), (-12.5, 12.5), (-10.0, 8.5198), (-7.5, 7.5), (-5.0, 3.5198), (-2.5, 2.5), (0.0, -1.4802), (2.5, -2.5), (5.0, -6.4802), (7.5, -7.5), (10.0, -11.4802), (12.5, -12.5), (15.0, -16.4802), (17.5, -17.5), (22.5, -17.5), (20.0, -16.4802), (17.5, -12.5), (15.0, -11.4802), (12.5, -7.5), (10.0, -6.4802), (7.5, -2.5), (5.0, -1.4802), (2.5, 2.5), (0.0, 3.5198), (-2.5, 7.5), (-5.0, 8.5198), (-7.5, 12.5), (-10.0, 13.5198), (-12.5, 17.5), (-7.5, 17.5), (-5.0, 13.5198), (-2.5, 12.5), (0.0, 8.5198), (2.5, 7.5), (5.0, 3.5198), (7.5, 2.5), (10.0, -1.4802), (12.5, -2.5), (15.0, -6.4802), (17.5, -7.5), (20.0, -11.4802), (22.5, -12.5), (25.0, -16.4802), (27.5, -17.5), (32.5, -17.5), (30.0, -16.4802), (27.5, -12.5), (25.0, -11.4802), (22.5, -7.5), (20.0, -6.4802), (17.5, -2.5), (15.0, -1.4802), (12.5, 2.5), (10.0, 3.5198), (7.5, 7.5), (5.0, 8.5198), (2.5, 12.5), (0.0, 13.5198), (-2.5, 17.5), (2.5, 17.5), (5.0, 13.5198), (7.5, 12.5), (10.0, 8.5198), (12.5, 7.5), (15.0, 3.5198), (17.5, 2.5), (20.0, -1.4802), (22.5, -2.5), (25.0, -6.4802), (27.5, -7.5), (30.0, -11.4802), (32.5, -12.5), (35.0, -16.4802), (37.5, -17.5), (42.5, -17.5), (40.0, -16.4802), (37.5, -12.5), (35.0, -11.4802), (32.5, -7.5), (30.0, -6.4802), (27.5, -2.5), (25.0, -1.4802), (22.5, 2.5), (20.0, 3.5198), (17.5, 7.5), (15.0, 8.5198), (12.5, 12.5), (10.0, 13.5198), (7.5, 17.5), (12.5, 17.5), (15.0, 13.5198), (17.5, 12.5), (20.0, 8.5198), (22.5, 7.5), (25.0, 3.5198), (27.5, 2.5), (30.0, -1.4802), (32.5, -2.5), (35.0, -6.4802), (37.5, -7.5), (40.0, -11.4802), (42.5, -12.5), (45.0, -16.4802), (47.5, -17.5), (52.5, -17.5), (50.0, -16.4802), (47.5, -12.5), (45.0, -11.4802), (42.5, -7.5), (40.0, -6.4802), (37.5, -2.5), (35.0, -1.4802), (32.5, 2.5), (30.0, 3.5198), (27.5, 7.5), (25.0, 8.5198), (22.5, 12.5), (20.0, 13.5198), (17.5, 17.5), (22.5, 17.5), (25.0, 13.5198), (27.5, 12.5), (30.0, 8.5198), (32.5, 7.5), (35.0, 3.5198), (37.5, 2.5), (40.0, -1.4802), (42.5, -2.5), (45.0, -6.4802), (47.5, -7.5), (50.0, -11.4802), (52.5, -12.5), (55.0, -16.4802), (55.0, -11.4802), (52.5, -7.5), (50.0, -6.4802), (47.5, -2.5), (45.0, -1.4802), (42.5, 2.5), (40.0, 3.5198), (37.5, 7.5), (35.0, 8.5198), (32.5, 12.5), (30.0, 13.5198), (27.5, 17.5), (32.5, 17.5), (35.0, 13.5198), (37.5, 12.5), (40.0, 8.5198), (42.5, 7.5), (45.0, 3.5198), (47.5, 2.5), (50.0, -1.4802), (52.5, -2.5), (55.0, -6.4802), (55.0, -1.4802), (52.5, 2.5), (50.0, 3.5198), (47.5, 7.5), (45.0, 8.5198), (42.5, 12.5), (40.0, 13.5198), (37.5, 17.5), (42.5, 17.5), (45.0, 13.5198), (47.5, 12.5), (50.0, 8.5198), (52.5, 7.5), (55.0, 3.5198), (55.0, 8.5198), (52.5, 12.5), (50.0, 13.5198), (47.5, 17.5)]

# Find intersections
intersections = clip_paths(mask, lines)


# Plotting
fig = plt.figure(figsize=(12, 8))


# Plot Mask
x1, y1 = zip(*mask)
plt.plot(x1, y1, marker='.', label='Boundary 1', color='red')
# Plot print grid
x2, y2 = zip(*lines)
plt.plot(x2, y2, marker='.', label='Infill Graph Layer 1', color='blue')
# Plot intersections
path1 = [intersections[i] for i in range(13, 98)]
x_int, y_int = zip(*path1)
plt.plot(x_int, y_int, marker='o', color='green', label='Intersections')

path1 = [intersections[i] for i in range(13)]
x_int, y_int = zip(*path1)
plt.plot(x_int, y_int, marker='o', color='green')

plt.title("Generate Printing Path")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.axhline(0, color='grey', lw=0.5)
plt.axvline(0, color='grey', lw=0.5)
plt.grid()
plt.gca().set_aspect('equal', adjustable='box')
plt.legend()
plt.show()